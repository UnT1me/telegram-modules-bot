from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from datetime import datetime, date
import re
import logging

from database import db
from config import TIMEZONE, POINTS_TO_MONEY_RATE
from utils import format_points, get_user_display_name, create_modules_keyboard

logger = logging.getLogger(__name__)
router = Router()

@router.message(Command("start"))
async def cmd_start(message: Message):
    """Start command handler"""
    user_name = get_user_display_name(message.from_user)
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
        "üéØ –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ –∏ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞—Ç—å –±–∞–ª–ª—ã.\n\n"
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/modules - –í—ã–±—Ä–∞—Ç—å –º–æ–¥—É–ª—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è\n"
        "/add - –î–æ–±–∞–≤–∏—Ç—å –º–æ–¥—É–ª—å –∫–æ–º–∞–Ω–¥–æ–π\n"
        "/points - –ú–æ–∏ –±–∞–ª–ª—ã –∑–∞ –º–µ—Å—è—Ü\n"
        "/graph - –ì—Ä–∞—Ñ–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n"
        "/insight - –ò–ò-–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n"
        "/leaderboard - –õ–∏–¥–µ—Ä–±–æ—Ä–¥\n\n"
        "‚è∞ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ —Å 18:00 –¥–æ 23:59"
    )

@router.message(Command("modules"))
async def cmd_modules(message: Message):
    """Show modules selection menu"""
    try:
        modules = await db.get_modules()
        if not modules:
            await message.answer("‚ùå –ú–æ–¥—É–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        
        keyboard = create_modules_keyboard(modules)
        await message.answer(
            "üìö –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"Error in cmd_modules: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª–µ–π.")

@router.callback_query(F.data.startswith("module_"))
async def handle_module_selection(callback: CallbackQuery):
    """Handle module selection from inline keyboard"""
    try:
        module_id = int(callback.data.split("_")[1])
        user_id = callback.from_user.id
        
        # Get module info
        modules = await db.get_modules()
        module = next((m for m in modules if m['id'] == module_id), None)
        
        if not module:
            await callback.answer("‚ùå –ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return
        
        # Add module completion
        await db.add_module_completion(user_id, module_id)
        
        # Create undo keyboard
        undo_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ", callback_data="undo_last")
            ]]
        )
        
        await callback.message.edit_text(
            f"‚úÖ –ú–æ–¥—É–ª—å '{module['name']}' –¥–æ–±–∞–≤–ª–µ–Ω!\n"
            f"üíé –ü–æ–ª—É—á–µ–Ω–æ –±–∞–ª–ª–æ–≤: {format_points(module['points'])}\n"
            f"üí∞ –î–µ–Ω—å–≥–∏: {format_points(module['points'] * POINTS_TO_MONEY_RATE)} ‚ÇΩ",
            reply_markup=undo_keyboard
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in handle_module_selection: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–æ–¥—É–ª—è!", show_alert=True)

@router.callback_query(F.data == "undo_last")
async def handle_undo_last(callback: CallbackQuery):
    """Handle undo last action"""
    try:
        user_id = callback.from_user.id
        last_action = await db.get_user_last_action(user_id)
        
        if not last_action:
            await callback.answer("‚ùå –ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã!", show_alert=True)
            return
        
        success = await db.undo_last_action(user_id)
        
        if success:
            await callback.message.edit_text(
                f"‚Ü©Ô∏è –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!\n"
                f"–£–¥–∞–ª–µ–Ω –º–æ–¥—É–ª—å: '{last_action['name']}' ({format_points(last_action['points'])} –±–∞–ª–ª–æ–≤)"
            )
            await callback.answer("‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!")
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ!", show_alert=True)
            
    except Exception as e:
        logger.error(f"Error in handle_undo_last: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ!", show_alert=True)

@router.message(Command("add"))
async def cmd_add(message: Message):
    """Add module by command: /add <module_name> <count>"""
    try:
        args = message.text.split()[1:]  # Remove /add
        
        if len(args) < 1:
            await message.answer(
                "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add <–Ω–∞–∑–≤–∞–Ω–∏–µ_–º–æ–¥—É–ª—è> [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "/add BMU 5X\n"
                "/add BMU 5X 3\n"
                "/add –ü—Ä–∞–∫—Ç–∏–∫–∞ 1"
            )
            return
        
        # Parse count if provided
        count = 1
        if args[-1].isdigit():
            count = int(args[-1])
            module_name = " ".join(args[:-1])
        else:
            module_name = " ".join(args)
        
        # Find module
        module = await db.get_module_by_name(module_name)
        if not module:
            await message.answer(f"‚ùå –ú–æ–¥—É–ª—å '{module_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # Add multiple completions
        user_id = message.from_user.id
        for _ in range(count):
            await db.add_module_completion(user_id, module['id'])
        
        total_points = module['points'] * count
        total_money = total_points * POINTS_TO_MONEY_RATE
        
        # Create undo keyboard
        undo_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ", callback_data="undo_last")
            ]]
        )
        
        count_text = f" (x{count})" if count > 1 else ""
        await message.answer(
            f"‚úÖ –ú–æ–¥—É–ª—å '{module['name']}'{count_text} –¥–æ–±–∞–≤–ª–µ–Ω!\n"
            f"üíé –ü–æ–ª—É—á–µ–Ω–æ –±–∞–ª–ª–æ–≤: {format_points(total_points)}\n"
            f"üí∞ –î–µ–Ω—å–≥–∏: {format_points(total_money)} ‚ÇΩ",
            reply_markup=undo_keyboard
        )
        
    except Exception as e:
        logger.error(f"Error in cmd_add: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–æ–¥—É–ª—è.")

@router.message(Command("points"))
async def cmd_points(message: Message):
    """Show user's points for current month"""
    try:
        user_id = message.from_user.id
        now = datetime.now(TIMEZONE)
        
        points = await db.get_user_points_for_month(user_id, now.year, now.month)
        money = points * POINTS_TO_MONEY_RATE
        
        # Get previous month for comparison
        prev_month = now.month - 1 if now.month > 1 else 12
        prev_year = now.year if now.month > 1 else now.year - 1
        prev_points = await db.get_user_points_for_month(user_id, prev_year, prev_month)
        
        change = points - prev_points
        change_symbol = "üìà" if change > 0 else "üìâ" if change < 0 else "‚û°Ô∏è"
        change_text = f"{change_symbol} {'+' if change > 0 else ''}{format_points(change)} –±–∞–ª–ª–æ–≤ –∫ –ø—Ä–æ—à–ª–æ–º—É –º–µ—Å—è—Ü—É"
        
        await message.answer(
            f"üíé –í–∞—à–∏ –±–∞–ª–ª—ã –∑–∞ {now.strftime('%B %Y')}:\n\n"
            f"üéØ –ë–∞–ª–ª—ã: {format_points(points)}\n"
            f"üí∞ –î–µ–Ω—å–≥–∏: {format_points(money)} ‚ÇΩ\n\n"
            f"{change_text}"
        )
        
    except Exception as e:
        logger.error(f"Error in cmd_points: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤.")
