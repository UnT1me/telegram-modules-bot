from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, User
from typing import List, Dict
import math

def format_points(points: float) -> str:
    """Format points with proper decimal display"""
    if points == int(points):
        return str(int(points))
    return f"{points:.1f}"

def get_user_display_name(user: User) -> str:
    """Get user display name (first name or username)"""
    if user.first_name:
        return user.first_name
    elif user.username:
        return f"@{user.username}"
    else:
        return f"User{user.id}"

def create_modules_keyboard(modules: List[Dict], page: int = 0, per_page: int = 8) -> InlineKeyboardMarkup:
    """Create inline keyboard for module selection with pagination"""
    keyboard = []
    
    # Calculate pagination
    total_pages = math.ceil(len(modules) / per_page)
    start_idx = page * per_page
    end_idx = min(start_idx + per_page, len(modules))
    
    # Add module buttons (2 per row)
    for i in range(start_idx, end_idx, 2):
        row = []
        
        # First module in row
        module = modules[i]
        button_text = f"{module['name']} ({format_points(module['points'])})"
        row.append(InlineKeyboardButton(
            text=button_text, 
            callback_data=f"module_{module['id']}"
        ))
        
        # Second module in row (if exists)
        if i + 1 < end_idx:
            module = modules[i + 1]
            button_text = f"{module['name']} ({format_points(module['points'])})"
            row.append(InlineKeyboardButton(
                text=button_text, 
                callback_data=f"module_{module['id']}"
            ))
        
        keyboard.append(row)
    
    # Add pagination buttons if needed
    if total_pages > 1:
        pagination_row = []
        
        if page > 0:
            pagination_row.append(InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
                callback_data=f"modules_page_{page-1}"
            ))
        
        pagination_row.append(InlineKeyboardButton(
            text=f"{page+1}/{total_pages}", 
            callback_data="noop"
        ))
        
        if page < total_pages - 1:
            pagination_row.append(InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", 
                callback_data=f"modules_page_{page+1}"
            ))
        
        keyboard.append(pagination_row)
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_rank_emoji(position: int) -> str:
    """Get emoji for leaderboard position"""
    if position == 1:
        return "ü•á"
    elif position == 2:
        return "ü•à"
    elif position == 3:
        return "ü•â"
    else:
        return f"{position}."

def calculate_monthly_progress_score(current_points: float, previous_points: float, days_in_month: int, current_day: int) -> int:
    """Calculate progress score from 1 to 10 based on various factors"""
    
    # Base score calculation
    if previous_points == 0:
        # New user - judge by current performance
        daily_average = current_points / current_day if current_day > 0 else 0
        projected_monthly = daily_average * days_in_month
        
        # Score based on projected monthly performance
        if projected_monthly >= 300:
            base_score = 10
        elif projected_monthly >= 200:
            base_score = 8
        elif projected_monthly >= 100:
            base_score = 6
        elif projected_monthly >= 50:
            base_score = 4
        else:
            base_score = 2
    else:
        # Existing user - compare with previous month
        progress_ratio = current_points / previous_points if previous_points > 0 else 1
        
        if progress_ratio >= 1.5:  # 50% improvement
            base_score = 10
        elif progress_ratio >= 1.2:  # 20% improvement
            base_score = 8
        elif progress_ratio >= 1.0:  # Maintaining level
            base_score = 6
        elif progress_ratio >= 0.8:  # Slight decline
            base_score = 4
        else:  # Significant decline
            base_score = 2
    
    # Consistency bonus (check if user is actively participating)
    consistency_bonus = 1 if current_points > 0 else -1
    
    # Final score (1-10 range)
    final_score = max(1, min(10, base_score + consistency_bonus))
    
    return final_score

def generate_progress_insights(user_id: int, current_points: float, previous_points: float, 
                             daily_stats: Dict[int, float], days_in_month: int, current_day: int) -> str:
    """Generate AI-like insights based on user statistics"""
    
    score = calculate_monthly_progress_score(current_points, previous_points, days_in_month, current_day)
    
    # Calculate some stats
    daily_average = current_points / current_day if current_day > 0 else 0
    projected_monthly = daily_average * days_in_month
    active_days = len(daily_stats)
    activity_rate = (active_days / current_day * 100) if current_day > 0 else 0
    
    insights = []
    
    # Performance assessment
    if score >= 8:
        insights.append("üî• –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –≤–ø–µ—á–∞—Ç–ª—è–µ—Ç!")
    elif score >= 6:
        insights.append("üëç –•–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ.")
    elif score >= 4:
        insights.append("üìà –ï—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±—ã—Ç—å –±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω—ã–º–∏.")
    else:
        insights.append("üí™ –í—Ä–µ–º—è –≤–∑—è—Ç—å—Å—è –∑–∞ –¥–µ–ª–æ! –£–≤–µ–ª–∏—á—å—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.")
    
    # Activity insights
    if activity_rate >= 80:
        insights.append(f"üìÖ –û—Ç–ª–∏—á–Ω–∞—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å! –ê–∫—Ç–∏–≤–Ω—ã {active_days} –∏–∑ {current_day} –¥–Ω–µ–π ({activity_rate:.0f}%).")
    elif activity_rate >= 50:
        insights.append(f"üìÖ –ù–µ–ø–ª–æ—Ö–∞—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å: {active_days} –∏–∑ {current_day} –¥–Ω–µ–π ({activity_rate:.0f}%). –ú–æ–∂–Ω–æ —á–∞—â–µ!")
    else:
        insights.append(f"üìÖ –°—Ç–æ–∏—Ç –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω–µ–µ: —Ç–æ–ª—å–∫–æ {active_days} –∏–∑ {current_day} –¥–Ω–µ–π ({activity_rate:.0f}%).")
    
    # Progress comparison
    if previous_points > 0:
        change_percent = ((current_points - previous_points) / previous_points) * 100
        if change_percent > 20:
            insights.append(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ –ø—Ä–æ—à–ª–æ–º—É –º–µ—Å—è—Ü—É: +{change_percent:.0f}%! –í–ø–µ—á–∞—Ç–ª—è—é—â–∏–π —Ä–æ—Å—Ç!")
        elif change_percent > 0:
            insights.append(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ –ø—Ä–æ—à–ª–æ–º—É –º–µ—Å—è—Ü—É: +{change_percent:.0f}%. –î–≤–∏–∂–µ–º—Å—è –≤–ø–µ—Ä–µ–¥!")
        elif change_percent > -20:
            insights.append(f"üìä –ù–µ–±–æ–ª—å—à–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ: {change_percent:.0f}%. –í—Ä–µ–º—è –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!")
        else:
            insights.append(f"üìä –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ: {change_percent:.0f}%. –ù—É–∂–Ω–æ —Å—Ä–æ—á–Ω–æ –∞–∫—Ç–∏–≤–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
    
    # Projection
    insights.append(f"üéØ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–µ—Å—è—Ü: {format_points(projected_monthly)} –±–∞–ª–ª–æ–≤.")
    
    # Recommendations
    if daily_average < 5:
        insights.append("üí° –°–æ–≤–µ—Ç: –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –º–æ–¥—É–ª—å –≤ –¥–µ–Ω—å.")
    elif daily_average < 10:
        insights.append("üí° –°–æ–≤–µ—Ç: —É–≤–µ–ª–∏—á—å—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –º–æ–¥—É–ª–µ–π –∏–ª–∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.")
    else:
        insights.append("üí° –í—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏! –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Ç–µ–º–ø.")
    
    return "\n\n".join(insights)

class MonthNames:
    """Russian month names"""
    NAMES = {
        1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞", 4: "–∞–ø—Ä–µ–ª—è",
        5: "–º–∞—è", 6: "–∏—é–Ω—è", 7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞",
        9: "—Å–µ–Ω—Ç—è–±—Ä—è", 10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è"
    }
    
    FULL_NAMES = {
        1: "–Ø–Ω–≤–∞—Ä—å", 2: "–§–µ–≤—Ä–∞–ª—å", 3: "–ú–∞—Ä—Ç", 4: "–ê–ø—Ä–µ–ª—å",
        5: "–ú–∞–π", 6: "–ò—é–Ω—å", 7: "–ò—é–ª—å", 8: "–ê–≤–≥—É—Å—Ç",
        9: "–°–µ–Ω—Ç—è–±—Ä—å", 10: "–û–∫—Ç—è–±—Ä—å", 11: "–ù–æ—è–±—Ä—å", 12: "–î–µ–∫–∞–±—Ä—å"
    }
    
    @classmethod
    def get_month_name(cls, month: int) -> str:
        return cls.NAMES.get(month, str(month))
    
    @classmethod
    def get_full_month_name(cls, month: int) -> str:
        return cls.FULL_NAMES.get(month, str(month))
