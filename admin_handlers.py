from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from datetime import datetime, date
import logging

from database import db
from config import TIMEZONE, POINTS_TO_MONEY_RATE, ADMIN_IDS
from utils import format_points, get_user_display_name, MonthNames

logger = logging.getLogger(__name__)
router = Router()

async def is_admin(user_id: int) -> bool:
    """Check if user is admin (from config or database)"""
    return user_id in ADMIN_IDS or await db.is_admin(user_id)

@router.message(Command("admin"))
async def cmd_admin(message: Message):
    """Admin panel main menu"""
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"),
                InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
            ],
            [
                InlineKeyboardButton(text="üìà –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç—ã", callback_data="admin_reports"),
                InlineKeyboardButton(text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data="admin_manage")
            ]
        ]
    )
    
    await message.answer(
        "üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\\n\\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@router.callback_query(F.data == "admin_users")
async def admin_show_users(callback: CallbackQuery):
    """Show all users"""
    if not await is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return
    
    try:
        users = await db.get_all_users()
        now = datetime.now(TIMEZONE)
        
        if not users:
            await callback.message.edit_text("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
            return
        
        text = f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\\n\\n"
        
        for user_id in users[:20]:  # Limit to first 20
            try:
                user_info = await callback.bot.get_chat(user_id)
                name = get_user_display_name(user_info)
            except:
                name = f"User{user_id}"
            
            points = await db.get_user_points_for_month(user_id, now.year, now.month)
            text += f"üë§ {name} (ID: {user_id})\\n"
            text += f"   üíé {format_points(points)} –±–∞–ª–ª–æ–≤ –∑–∞ –º–µ—Å—è—Ü\\n\\n"
        
        if len(users) > 20:
            text += f"... –∏ –µ—â–µ {len(users) - 20} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        
        back_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
            ]]
        )
        
        await callback.message.edit_text(text, reply_markup=back_keyboard)
        
    except Exception as e:
        logger.error(f"Error in admin_show_users: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!", show_alert=True)

@router.callback_query(F.data == "admin_stats")
async def admin_show_stats(callback: CallbackQuery):
    """Show system statistics"""
    if not await is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return
    
    try:
        now = datetime.now(TIMEZONE)
        users = await db.get_all_users()
        leaderboard = await db.get_leaderboard(now.year, now.month, limit=100)
        
        total_users = len(users)
        active_users = len(leaderboard)
        
        # Calculate total points for current month
        total_points = sum(float(entry['total_points']) for entry in leaderboard)
        total_money = total_points * POINTS_TO_MONEY_RATE
        
        # Get modules info
        modules = await db.get_modules()
        
        text = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã\\n\\n"
            f"üìÖ –ü–µ—Ä–∏–æ–¥: {MonthNames.get_full_month_name(now.month)} {now.year}\\n\\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\\n"
            f"üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö –≤ –º–µ—Å—è—Ü–µ: {active_users}\\n"
            f"üìö –î–æ—Å—Ç—É–ø–Ω–æ –º–æ–¥—É–ª–µ–π: {len(modules)}\\n\\n"
            f"üíé –û–±—â–∏–π –±–∞–ª–∞–Ω—Å –±–∞–ª–ª–æ–≤: {format_points(total_points)}\\n"
            f"üí∞ –û–±—â–∏–π –¥–µ–Ω–µ–∂–Ω—ã–π —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç: {format_points(total_money)} ‚ÇΩ\\n\\n"
            f"üìà –°—Ä–µ–¥–Ω–∏–µ –±–∞–ª–ª—ã –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "
            f"{format_points(total_points / active_users) if active_users > 0 else 0}"
        )
        
        back_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
            ]]
        )
        
        await callback.message.edit_text(text, reply_markup=back_keyboard)
        
    except Exception as e:
        logger.error(f"Error in admin_show_stats: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!", show_alert=True)

@router.callback_query(F.data == "admin_reports")
async def admin_send_reports(callback: CallbackQuery):
    """Send monthly reports to all users"""
    if not await is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return
    
    try:
        users = await db.get_all_users()
        now = datetime.now(TIMEZONE)
        
        # Get previous month
        prev_month = now.month - 1 if now.month > 1 else 12
        prev_year = now.year if now.month > 1 else now.year - 1
        
        sent_count = 0
        error_count = 0
        
        for user_id in users:
            try:
                points = await db.get_user_points_for_month(user_id, prev_year, prev_month)
                
                if points > 0:  # Send report only to users with activity
                    money = points * POINTS_TO_MONEY_RATE
                    
                    try:
                        user_info = await callback.bot.get_chat(user_id)
                        name = get_user_display_name(user_info)
                    except:
                        name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                    
                    report_text = (
                        f"üìä –û—Ç—á–µ—Ç –∑–∞ {MonthNames.get_full_month_name(prev_month)} {prev_year}\\n\\n"
                        f"üë§ {name}\\n"
                        f"üíé –ù–∞–±—Ä–∞–Ω–æ –±–∞–ª–ª–æ–≤: {format_points(points)}\\n"
                        f"üí∞ –î–µ–Ω–µ–∂–Ω—ã–π —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç: {format_points(money)} ‚ÇΩ\\n\\n"
                        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å! üéâ"
                    )
                    
                    await callback.bot.send_message(user_id, report_text)
                    sent_count += 1
                    
            except Exception as e:
                logger.error(f"Error sending report to user {user_id}: {e}")
                error_count += 1
        
        result_text = (
            f"üìß –û—Ç—á–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!\\n\\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {sent_count}\\n"
            f"‚ùå –û—à–∏–±–æ–∫: {error_count}"
        )
        
        back_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
            ]]
        )
        
        await callback.message.edit_text(result_text, reply_markup=back_keyboard)
        
    except Exception as e:
        logger.error(f"Error in admin_send_reports: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–æ–≤!", show_alert=True)

@router.callback_query(F.data == "admin_manage")
async def admin_manage(callback: CallbackQuery):
    """Admin management menu"""
    if not await is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="admin_add_admin"),
                InlineKeyboardButton(text="üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è–º–∏", callback_data="admin_modules")
            ],
            [
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
            ]
        ]
    )
    
    await callback.message.edit_text(
        "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π\\n\\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@router.callback_query(F.data == "admin_modules")
async def admin_show_modules(callback: CallbackQuery):
    """Show modules management"""
    if not await is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return
    
    try:
        modules = await db.get_modules()
        
        text = f"üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è–º–∏ ({len(modules)} —à—Ç.)\\n\\n"
        
        for module in modules:
            text += f"‚Ä¢ {module['name']} - {format_points(module['points'])} –±–∞–ª–ª–æ–≤\\n"
        
        text += "\\nüí° –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–∏–∑–º–µ–Ω–µ–Ω–∏—è –º–æ–¥—É–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä—è–º—ã–µ SQL-–∑–∞–ø—Ä–æ—Å—ã –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
        
        back_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_manage")
            ]]
        )
        
        await callback.message.edit_text(text, reply_markup=back_keyboard)
        
    except Exception as e:
        logger.error(f"Error in admin_show_modules: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª–µ–π!", show_alert=True)

@router.callback_query(F.data == "admin_back")
async def admin_back_to_main(callback: CallbackQuery):
    """Go back to main admin menu"""
    await cmd_admin(callback.message)
    await callback.answer()

@router.message(Command("admin_user"))
async def cmd_admin_user(message: Message):
    """Get specific user statistics: /admin_user <user_id>"""
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    try:
        args = message.text.split()[1:]
        if not args:
            await message.answer("üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_user <user_id>")
            return
        
        user_id = int(args[0])
        now = datetime.now(TIMEZONE)
        
        # Get user info
        try:
            user_info = await message.bot.get_chat(user_id)
            name = get_user_display_name(user_info)
        except:
            name = f"User{user_id}"
        
        # Get current month stats
        current_points = await db.get_user_points_for_month(user_id, now.year, now.month)
        daily_stats = await db.get_user_daily_stats(user_id, now.year, now.month)
        
        # Get previous month stats
        prev_month = now.month - 1 if now.month > 1 else 12
        prev_year = now.year if now.month > 1 else now.year - 1
        prev_points = await db.get_user_points_for_month(user_id, prev_year, prev_month)
        
        active_days = len(daily_stats)
        money = current_points * POINTS_TO_MONEY_RATE
        
        text = (
            f"üë§ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\\n\\n"
            f"–ò–º—è: {name}\\n"
            f"ID: {user_id}\\n\\n"
            f"üìÖ {MonthNames.get_full_month_name(now.month)} {now.year}:\\n"
            f"üíé –ë–∞–ª–ª—ã: {format_points(current_points)}\\n"
            f"üí∞ –î–µ–Ω—å–≥–∏: {format_points(money)} ‚ÇΩ\\n"
            f"üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π: {active_days}\\n\\n"
            f"üìÖ {MonthNames.get_full_month_name(prev_month)} {prev_year}:\\n"
            f"üíé –ë–∞–ª–ª—ã: {format_points(prev_points)}\\n\\n"
        )
        
        if prev_points > 0:
            change = current_points - prev_points
            change_percent = (change / prev_points) * 100
            text += f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {'+' if change > 0 else ''}{format_points(change)} –±–∞–ª–ª–æ–≤ ({change_percent:+.1f}%)"
        
        await message.answer(text)
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    except Exception as e:
        logger.error(f"Error in cmd_admin_user: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
